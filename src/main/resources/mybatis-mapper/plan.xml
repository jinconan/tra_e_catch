<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis-mapper.planMapper">

	<!-- 특정 페이지에 있는 기획서 리스트 출력 -->
	<select id="getPropList" resultType="map" parameterType="map">
	SELECT *
	FROM (
		 SELECT rownum rno
		    ,prop_no
		    ,doc_no as "doc_no"
		    ,content as "title"
		    ,name as "emp_name"
		    ,up_date as "up_date"
		    ,path as "path"
		    FROM (
		        SELECT rownum prop_no
		        ,doc_no,content,name,up_date,path
		        FROM (
		        SELECT doc_no
		            ,content
		            ,e.name
		            ,up_date
		            ,path 
		            FROM docs 
		                INNER JOIN employee e ON docs.emp_no=e.emp_no
		            WHERE DOCS.DTYPE_NO = 310
		            ORDER BY doc_no asc
		        )
		        ORDER BY prop_no desc
		    )
	    )
	    <where>
	    	<if test="pageNo != null">
	    		rno between (#{pageNo}-1)*10+1 and (#{pageNo})*10	
	    	</if>
	    	<if test="propNo != null">
	    		AND prop_no = #{propNo}
	    	</if>
	    	<choose>
				<when
					test="searchColumn != null and searchColumn.equals('propTitle')">
					AND title LIKE '%' || #{searchValue} || '%'
				</when>
				<when
					test="searchColumn != null and searchColumn.equals('propWriter')">
					AND emp_name LIKE '%' || #{searchValue} || '%'
				</when>
				<otherwise></otherwise>
			</choose>
	    </where>
	</select>
	
	<!-- 기획서 리스트의 페이지 갯수 -->
	<select id="getNumOfPropPage" resultType="int">
		SELECT CEIL(count(*)/10)
		    FROM docs 
		        INNER JOIN employee e ON docs.emp_no=e.emp_no
		    WHERE DOCS.DTYPE_NO = 310
		    <choose>
				<when
					test="searchColumn != null and searchColumn.equals('propTitle')">
					AND title LIKE '%' || #{searchValue} || '%'
				</when>
				<when
					test="searchColumn != null and searchColumn.equals('propWriter')">
					AND emp_name LIKE '%' || #{searchValue} || '%'
				</when>
				<otherwise></otherwise>
			</choose>
	</select>
	
	<!-- 기획서 추가 -->
	<insert id="insertProp" parameterType="map">
		<selectKey keyProperty="doc_no" order="BEFORE" resultType="int">
			SELECT seq_doc_no.nextval FROM dual
		</selectKey>
		INSERT INTO docs(emp_no, dtype_no, path, content, doc_no, up_date)
			VALUES(#{emp_no}, 310,#{propFile},#{propTitle},#{doc_no},TO_CHAR(SYSDATE,'YYYY-MM-DD'))
	</insert>
	
	
	<!-- 특정 조건에 대한 프로젝트 리스트를 구함. -->
	<select id="getProjList" resultType="map" parameterType="map">
		SELECT *
		FROM(
			SELECT rownum rno
				,proj_no as "proj_no"
				,pstatus_no as "pstatus_no"
				,pstatus_name as "pstatus_name"
				,proj_name as "proj_name"
				,emp_name as "emp_name"
				,start_date as "start_date"
				,end_sched_date	as "end_sched_date"
				,end_date as "end_date"
			FROM (
				SELECT project.proj_no AS proj_no,
					proj_status.pstatus_no AS pstatus_no,
					proj_status.name AS pstatus_name,
					project.name AS proj_name,
					proj_member.name AS emp_name,
					project.start_date AS start_date,
					project.end_sched_date AS end_sched_date,
					project.end_date AS end_date
				FROM (
					SELECT proj_no, role_type.rtype_no, employee.name
					FROM employee, role_type, proj_member
					WHERE proj_member.rtype_no = role_type.rtype_no
						AND proj_member.emp_no = employee.emp_no
						AND role_type.rtype_no = 101
					) proj_member,project, proj_status
				WHERE project.pstatus_no = proj_status.pstatus_no
					AND proj_member.proj_no(+) = project.proj_no
				ORDER BY project.proj_no DESC
			)
			<where>
				<choose>
					<when test="pstatus_name!=null and pstatus_name.equals('진행중')">
						AND pstatus_no = 1
					</when>
					<when test="pstatus_name!=null and pstatus_name.equals('종료')">
						AND pstatus_no = 2
					</when>
					<when test="pstatus_name!=null and pstatus_name.equals('중단')">
						AND pstatus_no = 3
					</when>
					<otherwise></otherwise>
				</choose>
				<choose>
					<when
						test="searchColumn != null and searchColumn.equals('project_name')">
						AND proj_name LIKE '%' || #{searchValue} || '%'
					</when>
					<when
						test="searchColumn != null and searchColumn.equals('leader_name')">
						AND emp_name LIKE '%' || #{searchValue} || '%'
					</when>
					<otherwise></otherwise>
				</choose>
				<if test="emp_no != null">
					proj_no IN (SELECT proj_no FROM proj_member WHERE emp_no = #{emp_no})
				</if>
			</where>
		)
		WHERE rno BETWEEN (#{pageNo}-1)*10+1 AND #{pageNo}*10
	</select>

	<!-- 특정 조건에 대해서 조회된 프로젝트 리스트의 총 페이지 개수를 구함. -->
	<select id="getNumOfProjPage" resultType="int"
		parameterType="map">
		SELECT CEIL(count(*)/10)
		FROM (
			SELECT project.proj_no AS proj_no,
				proj_status.pstatus_no AS pstatus_no,
				proj_status.name AS pstatus_name,
				project.name AS proj_name,
				proj_member.name AS emp_name,
				project.start_date AS start_date,
				project.end_sched_date AS end_sched_date,
				project.end_date AS end_date
			FROM (
				SELECT proj_no, role_type.rtype_no, employee.name
				FROM employee, role_type, proj_member
				WHERE proj_member.rtype_no = role_type.rtype_no
					AND proj_member.emp_no = employee.emp_no
					AND role_type.rtype_no = 101
				) proj_member,project, proj_status
			WHERE project.pstatus_no = proj_status.pstatus_no
				AND proj_member.proj_no(+) = project.proj_no
			ORDER BY project.proj_no DESC
		)
		<where>
			<choose>
				<when test="pstatus_name!=null and pstatus_name.equals('진행중')">
					AND pstatus_no = 1
				</when>
				<when test="pstatus_name!=null and pstatus_name.equals('종료')">
					AND pstatus_no = 2
				</when>
				<when test="pstatus_name!=null and pstatus_name.equals('중단')">
					AND pstatus_no = 3
				</when>
				<otherwise></otherwise>
			</choose>
			<choose>
				<when
					test="searchColumn != null and searchColumn.equals('project_name')">
					AND proj_name LIKE '%' || #{searchValue} || '%'
				</when>
				<when
					test="searchColumn != null and searchColumn.equals('leader_name')">
					AND emp_name LIKE '%' || #{searchValue} || '%'
				</when>
				<otherwise></otherwise>
			</choose>
			<if test="emp_no != null">
				proj_no IN (SELECT proj_no FROM proj_member WHERE emp_no = #{emp_no})
			</if>
		</where>
	</select>

	<!-- 프로젝트 번호로 해당 프로젝트 조회 -->
	<select id="getProjDetail" parameterType="int" resultType="map">
		SELECT proj_no as "proj_no"
		,name as "proj_name"
		,DECODE(pstatus_no,1,'진행중',2,'종료',3,'중단') as "pstatus_name"
		,start_date as "start_date"
		,end_sched_date as "end_sched_date"
		,end_date as "end_date"
		,first_pay as "first_pay"
		FROM project
		WHERE
		proj_no = #{proj_no}
	</select>

	<!-- 프로젝트 참여 리스트 -->
	<select id="getJsonProjMemberList" parameterType="int"
		resultType="map">
		SELECT e.emp_no as "empNo"
		,e.name as "empName"
		,r.name as "roleName"
		,lev.name as "levName"
		,d.name as "deptName"
		,t.name as "teamName"
		,'' as "startDate"
		FROM proj_member pm
		inner join project p on pm.proj_no=p.proj_no
		inner join employee e on pm.emp_no=e.emp_no
		inner join role_type r on r.rtype_no=pm.rtype_no
		inner join ctlevel lev on lev.lev_no=e.lev_no
		inner join department d on d.dept_no=e.dept_no
		inner join team t on t.team_no=e.team_no
		WHERE p.proj_no=#{1}
		ORDER BY
		r.rtype_no ASC, lev.lev_no ASC
	</select>

	<!-- 프로젝트 미참여자 리스트 -->
	<select id="getJsonNotProjMemberList" parameterType="int"
		resultType="map">
		SELECT e.emp_no as "empNo"
		,e.name as "empName", lev.name as "levName", d.name as "deptName",t.name as
		"teamName"
		FROM employee e
		INNER JOIN ctlevel lev ON e.lev_no = lev.lev_no
		INNER JOIN department d ON e.dept_no = d.dept_no
		INNER JOIN team t ON e.team_no = t.team_no
		WHERE resign_yn = 0
		AND emp_no NOT IN
		(SELECT e.emp_no
		FROM employee e
		INNER JOIN proj_member pm ON e.emp_no = pm.emp_no
		WHERE pm.proj_no = #{1})
		ORDER BY lev.lev_no ASC, e.emp_no ASC
	</select>

	<!-- 프로젝트 일정 리스트 Json으로 사용하기위한 단순한 버전 -->
	<select id="getJsonProjTimeline" parameterType="map"
		resultType="map">
		SELECT schedule.sched_no as "sched_no"
		,schedule.name as "sched_name"
		,schedule.start_date as "start_date"
		,SCHEDULE.END_DATE as "end_date"
		FROM schedule,project
		WHERE
		schedule.proj_no = project.proj_no
		<if test="proj_no != null">
			AND project.proj_no = #{proj_no}
		</if>
		<if test="isToday == true">
			AND TO_DATE(TO_CHAR(sysdate,'YYYY-MM-DD'),'YYYY-MM-DD')
			BETWEEN TO_DATE(schedule.start_date,'YYYY-MM-DD') AND
			TO_DATE(schedule.end_date,'YYYY-MM-DD')
		</if>
		ORDER BY schedule.sched_no ASC
	</select>

	<!-- 프로젝트 추가 -->
	<insert id="insertProj" parameterType="map">
		INSERT INTO
		project(proj_no, name, start_date, end_sched_date, pstatus_no)
		VALUES(seq_proj_no.nextval, #{proj_name},
		#{start_date},#{end_sched_date},1)
	</insert>
	
	<!-- 프로젝트 삭제 -->
	<delete id="deleteProj" statementType="CALLABLE" parameterType="int">
		{ CALL proc_delete_project(#{1})}
	</delete>
	
	<!-- 프로젝트 수정 -->
	<update id="updateProj" parameterType="map">
		UPDATE project
		<set>
			<if test="proj_name != null">name=#{proj_name},</if>
			<if test="start_date != null">start_date=#{start_date},</if>
			<if test="end_sched_date != null">end_sched_date=#{end_sched_date},</if>
			<if test="end_date != null">end_date=#{end_date},</if>
			<if test="pstatus_no != null">pstatus_no=#{pstatus_no},</if>
			<if test="prod_no != null">prod_no=#{prod_no},</if>
			<if test="first_pay != null">first_pay=#{first_pay}</if>
		</set>
		WHERE proj_no = #{proj_no}
	</update>

	<!-- 일정 추가 -->
	<insert id="insertTimeline" parameterType="map">
		INSERT INTO
		schedule(proj_no, sched_no, name, start_date, end_date)
		VALUES(#{proj_no},(SELECT NVL(MAX(sched_no),0)+1 FROM schedule WHERE
		proj_no = #{proj_no}),
		#{sched_name},#{start_date},#{end_date})
	</insert>
	
	<!-- 일정 수정 -->
	<update id="updateTimeline" parameterType="map">
		UPDATE schedule
		<set>
			<if test="sched_name != null">name=#{sched_name},</if>
			<if test="start_date != null">start_date=#{start_date},</if>
			<if test="end_date != null">end_date=#{end_date}</if>
		</set>
		WHERE proj_no = #{proj_no} AND sched_no = #{sched_no}
	</update>
	
	<!-- 일정 삭제 -->
	<delete id="deleteTimeline" parameterType="map">
		DELETE FROM schedule
		WHERE proj_no = #{proj_no}
		<if test="sched_no != null">
			AND sched_no = #{sched_no}
		</if>
	</delete>

	<!-- 멤버 추가 -->
	<insert id="insertMember" parameterType="map">
		INSERT INTO
		proj_member(proj_no, emp_no, rtype_no)
		VALUES(#{proj_no}, #{emp_no},102)
	</insert>

	<!-- 멤버 삭제 -->
	<delete id="deleteMember" parameterType="map">
		DELETE FROM proj_member
		WHERE proj_no = #{proj_no} AND emp_no = #{emp_no}
	</delete>

	<!-- 멤버 역할 변경 -->
	<update id="updateMember" parameterType="map">
		UPDATE proj_member
		SET rtype_no = #{rtype_no}
		WHERE proj_no = #{proj_no} AND
		emp_no = #{emp_no}
	</update>
	
	<!-- 프로젝트 게시판 목록 조회 -->
	<select id="getProjBoardList" parameterType="int" resultType="map">
		SELECT p.proj_no as "proj_no"
		,pb.board_no as "board_no" ,pb.board_name as "board_name"
		FROM proj_board pb
		    INNER JOIN project p ON pb.proj_no = p.proj_no
		WHERE
		    P.PROJ_NO = #{1}
	</select>
	    
	<!-- 프로젝트 게시판 추가 -->
	<insert id="insertProjBoard" statementType="CALLABLE" parameterType="map">
		{ CALL proc_create_proj_board(#{proj_no}, #{board_name})}
	</insert>
	
	<!-- 프로젝트 게시판 삭제 -->
	<delete id="deleteProjBoard" parameterType="map">
		{ CALL proc_delete_proj_board(#{proj_no}, #{board_no})}
	</delete>
	
	<!-- 프로젝트 게시판 이름변경 -->
	<update id="updateProjBoard" parameterType="map">
		UPDATE proj_board SET board_name=#{board_name} WHERE proj_no=#{proj_no} AND board_no=#{board_no}
	</update>
	
	<!-- 프로젝트 게시물 추가 -->
	<insert id="insertArticle" parameterType="map">
		<selectKey keyProperty="article_no" resultType="int" order="BEFORE">
			select seq_article_no.nextval from dual
		</selectKey>        
		INSERT INTO board_article(article_no,proj_no,board_no,article_title,article_content
		,article_path, article_writer, article_date, article_hit)
		    VALUES(#{article_no}, #{proj_no},#{board_no},#{article_title},#{article_content}
		        ,#{article_path},#{article_writer},TO_CHAR(SYSDATE,'YYYY-MM-DD'), 0)
	</insert>
	
	<!-- 프로젝트 게시물 삭제 -->
	<delete id="deleteArticle" parameterType="int">
		DELETE FROM board_article WHERE article_no=#{1} 
	</delete>
	
	<!-- 프로젝트 게시물 수정 -->
	<update id="updateArticle" parameterType="map">
		UPDATE board_article
		<set>
			<if test="article_title != null">
				article_title = #{article_title},
			</if>
			<if test="article_content != null">
				article_content = #{article_content},
			</if> 
			<if test="article_path != null">
				article_path = #{article_path}
			</if>
		</set>
		WHERE article_no=#{article_no}
	</update>
	
	<!-- 프로젝트 게시물 상세조회(조회수+1) -->
	<update id="hitArticle" parameterType="int">
		UPDATE board_article
		SET article_hit = article_hit+1
		WHERE article_no = #{1}
	</update>
	<!-- 프로젝트 게시물 페이지 갯수-->
	<select id="getNumOfArticlePage" parameterType="map" resultType="int">
		SELECT CEIL(count(*)/10)
		FROM board_article
		WHERE proj_no=#{proj_no} AND board_no=#{board_no}
		<choose>
			<when test="searchColumn != null and searchColumn.equals('articleTitle')">
				AND article_title LIKE '%' || #{searchValue} || '%'
			</when>
			<when test="searchColumn != null and searchColumn.equals('articleWriter')">
				AND article_writer LIKE '%' || #{searchValue} || '%'
			</when>
			<otherwise></otherwise>
		</choose>
	</select>
	
	<select id="getBoardName" parameterType="map" resultType="string">
		SELECT board_name
			FROM proj_board
			WHERE board_no = #{board_no} AND proj_no=#{proj_no}
	</select>
	
	<!-- 프로젝트 게시물 조회 -->
	<select id="getArticleList" parameterType="map" resultType="map">
		SELECT *
        FROM (
            SELECT rownum rno, ano
                ,proj_no, board_no, article_no
                ,article_title,article_content,article_path
                ,article_writer,article_date,article_hit
            FROM(
                SELECT rownum ano
                    ,proj_no, board_no, article_no
                    ,article_title,article_content,article_path
                    ,article_writer,article_date,article_hit
                FROM(
                    SELECT p.proj_no,pb.board_no,article_no
                        ,article_title,article_content,article_path
                        ,article_writer,article_date,article_hit
                    FROM board_article a 
                        INNER JOIN project p ON a.proj_no = p.proj_no
                        INNER JOIN proj_board pb ON a.board_no = pb.board_no
                    ORDER BY article_no asc
                )
                <where>
                	<if test="proj_no != null">proj_no=#{proj_no}</if>
					<if test="board_no != null">AND board_no=#{board_no}</if>
                </where>
                ORDER BY ano desc
            )
        )            
		<where>
			<if test="pageNo != null">
				rno between (#{pageNo}-1)*10+1 and (#{pageNo})*10  
			</if> 
			<choose>
				<when test="searchColumn != null and searchColumn.equals('articleTitle')">
					AND article_title LIKE '%' || #{searchValue} || '%'
				</when>
				<when test="searchColumn != null and searchColumn.equals('articleWriter')">
					AND article_writer LIKE '%' || #{searchValue} || '%'
				</when>
				<otherwise></otherwise>
			</choose>
		</where>	
	</select>
	
	<select id="getArticleDetail" parameterType="int" resultType="map">
		SELECT article_no, proj_no, board_no
			,article_title, article_content, article_writer
			,article_date, article_hit, article_path
		FROM board_article
		WHERE article_no=#{1}
	</select>
</mapper>